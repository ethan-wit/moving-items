import pandas as pd 
import sqlite3
import getpass
import hashlib
import random
import functools
import sys

###################################
#Enforce foreign keys/schema in create db function
#Implement methods
#Add to main dictionary
#####################################

#create (if not exist) sqlite tables
#create_new_item(self, user, item_name, desired_quantity=0, quantity=0)

#read_user_items(self, user)
#read_item_desired_quantity(self, user, item_name)
#read_item_quantity(self, user, item_name)

#update_item_name(self, user, item_name, new_item_name)
#update_desired_quantity(self, user, desired_quantity, new_desired_quantity)
#update_quantity(self, user, quantity, new_quantity)
#update_clear_quantities(self, user)

#delete_item(self, user, item_name)


class MovingItems:
    '''
    Object that performs CRUD operations on a sqlite database of users' items they wish to bring when moving dorms/apartments.
    '''


    def __init__(self, user):
        '''
        Constructs a moving items object.
        Sets self.__user instance variable to Authenticator login return, which allows for CRUD operations on user's database items.
        @param self.__user: username in database users table
        '''

        #user instance variable
        self.__user = user
        #Connect to db, create cursor
        self.__conn = sqlite3.connect('moving-items.db')
        self.__cursor = conn.cursor()


    def db_decorator(meth):
        '''
        decorator for CRUD methods
        '''

        @functools.wraps(meth)
        def db_commit(self, *args, **kwargs):
            '''
            Commits changes to database
            '''

            meth_return = meth(self, *args, **kwargs)

            #Commit to db
            self.__conn.commit()

            return meth_return

        return db_commit


    @db_decorator
    def create_new_item(self):

        item_name = input('Please input the item you would like to add to your list: ')
        desired_quantity = input('Please input the desired quantity of this item: ')
        quantity = input('Please input the current quantity held for this item: ')

        add_item_sql = '''
        INSERT OR REPLACE INTO moving-items.items(?)
        '''
        self.__cursor.execute(add_item_sql, (item_name,))

        add_user_item_sql = '''
        INSERT INTO moving-items.user_items(?,?,?,?)
        '''
        self.__cursor.execute(add_user_item_sql, (self.__user, item_name, desired_quantity, quantity))

        print(f'{item_name} has been added to your list')



    def logoff(self):

        print('You will now be logged off, and the program will end.')
        self.__conn.close()
        time.sleep(4)
        sys.exit()


class Authenticator(): 
    '''
    Allows user to log in or sign up. 
    '''


    def __init__():

        #class variables for user 
        self.__username = None
        self.__password = None
        self.__conn = sqlite3.connect('moving-items.db')
        self.__cursor = conn.cursor()


    def greeting(self):
        '''
        Asks user if they would like to log in or sign up, until valid string is input.
        Initiatites _signup() or _login() methods if options are chosen.
        '''

        login_signup_decision = input('Would you like to "signup" or "login": ')
        while (login_signup_decision != "signup") or (login_signup_decision != "login"):
            login_signup_decision = input('You did not input "signup" or "login". Please input one of these options: ')
            time.sleep(2)

        if login_signup_decision == "signup":
            self._signup()
            login_response = input('Would you now like to log in? Please respond either "yes" or "no".')
            if login_response == "yes":
                self._login()
            elif login_response == "no":
                print("Thank you. The program will now end.")
                time.sleep(4)
                sys.exit()
            else:
                print("Invalid response. The program will now end.")
                time.sleep(4)
                sys.exit()

        elif login_signup_decision == "login":
            self._login()



    def _no_dup_username(self):
        '''
        Create new username (8 integers) that is unique in list of existing usernames
        '''

        #Generate random username
        rand_username = random.randint(10000000,99999999)

        #Ensure rand_username isn't already in use
        get_usernames = '''
        SELECT USERNAME
        FROM users
        '''
        self.__cursor.execute(get_usernames)
        usernames = self.__cursor.fetchall()

        while rand_username in usernames:

            rand_username = random.randint(10000000,99999999)

        return rand_username 



    def _signup(self):
        '''
        Adds user's username (autogenerated) and password (hashed) to user table in sqlite database.
        '''

        #Create unique username
        self.__username = self._no_dup_username()

        #Input password
        self.__password = getpass.getpass('Please input your new password. It must be 8-10 characters, include one upper-case letter, one lower-case letter, one number, and one special character (e.g. %*$): ')

        #Enforce criteria
        while re.search("^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,10}$", self.__password) == None:
            self.__password = getpass.getpass('Password did not meet criteria. Please input your new password. It must be 8-10 characters, include one upper-case letter, one lower-case letter, one number, and one special character (e.g. %*$): ')
            time.sleep(5)

        print(f'Thank you. Your password meets the critera. You have been assigned the username: {self.__username}. Please remember your username and password, as they will be required to log in.')
        #Hash password (should also salt if placed into production)
        hashed_password = hashlib.sha256(self.__password).hexdigest()
        #Place username & hashed password into users table
        insert_username_password = '''
        INSERT INTO moving-items.users (?,?)
        '''
        self.__cursor.execute(insert_username_password, (self.__username, hashed_password))
        self.__conn.commit()
        self.__conn.close()



    def _login(self):
        '''
        Logs in user, such that they can perform CRUD operations on their database items.
        '''

        if self.__username == None or self.__password == None:

            self.__username = input('Please input your user ID: ')
            self.__password = getpass.getpass('Please input your password: ')

        #Get match input username to a username in users table
        match_username = '''
        SELECT USERNAME FROM users WHERE USERNAME = ?
        '''
        cursor.execute(match_username, (self.__username,))
        match_row_username = self.__cursor.fetchone()

        #Get match input username to a username in users table
        match_password = '''
        SELECT PASSWORD FROM users WHERE PASSWORD = ?
        '''
        self.__cursor.execute(match_password, (hashlib.sha256(self.__password).hexdigest(),))
        match_row_password = self.__cursor.fetchone()

        self.__conn.close()

        if (match_row_username == None):
            print("Matching username not found. Program will end, but please feel free to try again.")
            time.sleep(5)
            sys.exit()

        elif (match_row_password != None):
            print('User found.')

            if (match_row_password != None):
                print('Password accepted. User logged in.')
                return self.__username

            else:
                print("Matching password not found. This program will end, but please feel free to try again.")
                time.sleep(5)
                sys.exit()


def create_db_tables():

    #Connect to db
    conn = sqlite3.connect('moving-items.db')
    cursor = conn.cursor()

    #Create (if not exist) items table
    items_table = '''
    CREATE TABLE IF NOT EXISTS moving-items.items(
    ITEM_ID INTEGER PRIMARY KEY,
    ITEM TEXT,
    )
    '''
    cursor.execute(items_table)

    #Create (if not exist) users table in db
    create_users_table = '''
    CREATE IF NOT EXISTS moving-items.users(
    USERNAME INTEGER PRIMARY KEY,
    PASSWORD TEXT
    )
    '''
    cursor.execute(create_users_table)
    
    #Create (if not exist) users_items table
    users_items_table = '''
    CREATE IF NOT EXISTS moving-items.users_items(
    USERS_ITEMS_ID INTEGER PRIMARY KEY,
    USER_ID INTEGER,
    ITEM_ID INTEGER,
    DESIRED_QUANTITY INTEGER,
    QUANTITY INTEGER
    )
    '''

    #Commit and disconnect from db
    conn.commit()
    conn.close()


def main():

    '''
    The main function is a CRUD app (inputs from command line) that interacts with a sqlite3 db, 
    with the purpose of cataloging necessary items to bring when moving or going on a trip.
    '''

    #create (if not exist) db tables
    create_db_tables()

    #singup/login prompting object
    authentication = Authenticator()
    user = authentication.greeting()

    #user interface object
    crud = MovingItems(user)

    crud_dict = {'input new item' : , 'view items' : , "view item's desired quantity" : , "view item's quantity" :, "update item's name" :, "update item's desired quantity" :, "update item's quantity" :, "clear item quantities" :, 'delete item' :}

    #user method input
    def user_input():
        user_method_input = input('''Please input the action you would like to take. The options are listed below:\n
        input new item\n
        view items\n
        view item's desired quantity\n
        view item's quantity\n
        update item's name\n
        update item's desired quantity\n
        update item's quantity\n
        clear item quantities\n
        delete item\n
        log off

        ''')
        return user_method_input
    
    #user input
    user_method_input = user_input()

    while user_method_input != 'log off':

        if user_method_input in crud_dict.keys():
            #Execute chosen action
            crud_method = crud_dict.get(user_method_input)
            crud_method = crud_method + '()'
            crud.crud_method

        else:
            print('Invalid action. You must input an action from the list.')

        #re-init user input
        user_method_input = user_input()


    if user_method_input == 'log off':
        crud.logoff()









